@startuml EcoMove

' --- Capa de Dominio ---
package Domain {
  class Vehicle{
    - String idVehicle
    - String color
    - String model
    - String idStation
    - StatusVehicle state
    - GeoLocation geoLocation
    - int maxUserWeight
    - float velocityMax
    - float costForMinute
    + getters()
    + setters()
  }

  enum StatusVehicle {
    AVAILABLE
    IN_USE
    MAINTENANCE
    OUT_OF_SERVICE
  }

  class GeoLocation{
    - float latitude
    - float longitude
    - Date timestamp
    + getters()
    + setters()
  }

  class Station{
    - String idStation
    - String address      
    - GeoLocation geoLocation
    + getters()
    + setters()
  }

  class Battery {
    - int capacity
    - int autonomyRange
    + getters()
    + setters()
  }

  class Bicycle {
    - int gears
    - boolean hasBasket
    + getters()
    + setters()
  }

  class ElectricScooter {
    - boolean hasSeat
    - Battery batteryInfo
    + getters()
    + setters()
  }

  class Skateboard {
    - int deckSize 
    + getters()
    + setters()
  }

  class CarElectric {
    - int doors
    - String licensePlate
    - Battery batteryInfo
    - boolean hasAirConditioning
    + getters()
    + setters()
  }

  class User{
    - String idUser
    - String name
    - String lastName
    - String email
    - String passwordHash
    - UserStatus status
    + getters()
    + setters()
  }

  enum UserStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
  }

  class Loan {
    - String loanId
    - String userId
    - String vehicleId
    - Date startTime
    - Date endTime
    - String startStationId
    - String endStationId
    - LoanStatus status
    - float cost
    + calculateCost(): float
    + getters()
    + setters()
  }

  enum LoanStatus {
    ACTIVE
    COMPLETED
    CANCELLED
  }

  class Payment{
    - String paymentId
    - String loanId
    - float amount
    - PaymentStatus status
    - PaymentMethod method
    - Date paymentDate
    + getters()
    + setters()
  }

  enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
  }

  enum PaymentMethod {
    CASH
    CREDIT_CARD
    DIGITAL_WALLET
  }
}

' --- Capa de Servicio ---
package Service {
  interface IPaymentProcessor {
    + processPayment(payment: Payment): PaymentStatus
    + refundPayment(payment: Payment): PaymentStatus
  }

  class CashPaymentProcessor {
    + processPayment(payment: Payment): PaymentStatus
    + refundPayment(payment: Payment): PaymentStatus
  }

  class CreditCardPaymentProcessor {
    + processPayment(payment: Payment): PaymentStatus
    + refundPayment(payment: Payment): PaymentStatus
  }

  class PaymentProcessorFactory {
    + createProcessor(method: PaymentMethod): IPaymentProcessor
  }
}

' --- Relaciones de Dominio ---
Vehicle "many" --> "1" Station
Vehicle ..> StatusVehicle
Vehicle --> GeoLocation

Bicycle --|> Vehicle
ElectricScooter --|> Vehicle
Skateboard --|> Vehicle
CarElectric --|> Vehicle

ElectricScooter --> Battery
CarElectric --> Battery

User ..> UserStatus
User "1" --> "many" Loan : has

Loan ..> LoanStatus
Loan "1" --> "1" Vehicle : uses
Loan "1" --> "1" Station : startsAt
Loan "1" --> "1" Station : endsAt
Loan "1" --> "1" Payment : has

Payment ..> PaymentStatus
Payment ..> PaymentMethod

' --- Relaciones de Servicio ---
PaymentProcessorFactory --> IPaymentProcessor
CashPaymentProcessor ..|> IPaymentProcessor
CreditCardPaymentProcessor ..|> IPaymentProcessor

@enduml