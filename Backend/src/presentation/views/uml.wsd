@startuml EcoMove
' Vehicle and relations
class Vehicle{
    # String idVehicle
    # String color
    # String model
    # String idStation
    # StatusVehicle state
    # TypeVehicle type
    # GeoLocation geoLocation
    # int MaxUserWeight
    # float velocityMax
    # float costForMinute
    + getters()
    + setters()
}

enum TypeVehicle{
    BICYCLE 
    ELECTRIC_SCOOTER 
    SKATEBOARD 
    CAR_ELECTRIC
}
enum StatusVehicle {
    AVAILABLE
    IN_USE
    MAINTENANCE
    OUT_OF_SERVICE
}

class GeoLocation{
    - float latitude
    - float longitude
    - Date timestamp
    + getters()
    + setters()
}

class Station{
    - String idStation
    - String name
    - String address      
    - GeoLocation geoLocation
    + getters()
    + setters()
}

class Battery {
    - int capacity
    - int autonomyRange
    + getters()
    + setters()
}

Vehicle "Many" --> "1" Station 
Vehicle ..> StatusVehicle
Vehicle ..> TypeVehicle
Vehicle --> GeoLocation

' Bicycle 
class Bicycle {
    - int gears
    - boolean hasBasket
    + getters()
    + setters()
}

Bicycle --|> Vehicle


class ElectricScooter {
    - boolean hasSeat
    - Battery batteryInfo
    + getters()
    + setters()
}

ElectricScooter --|> Vehicle
ElectricScooter --> Battery

class Skateboard {
    - int deckSize 

}

Skateboard --|> Vehicle

class CarElectric {
    - int doors
    - Battery batteryInfo
    - boolean hasAirConditioning
}

CarElectric --> Battery
CarElectric --|> Vehicle

' part User
class User{
    - String idUser
    - String name
    - String lastName
    - String email
    - String password
    - List<Loan> loanHistory
    - List<Role> roles
    - subscriptionPlan: SubscriptionPlan 
    + getters()
    + setters()
}


class SubscriptionPlan{
    - String idPlan
    - String name
    - monthlyFee
    + getters()
    + setters()
}


User "1" --> "Many" Loan : has
User "1" --> "Many" Role : has
User "1" --> "1" SubscriptionPlan : can has
 
class Role{
    - String idRole
    - String name
    - List<String> permissions 
    + getters()
    + setters()
}

' part Loan
class Loan {
    - String loanId
    - String userId
    - String vehicleId
    - Date startTime
    - Date endTime
    - String startStationId
    - String endStationId
    - LoanStatus status
    - float cost
    + getters()
    + setters()
}

enum LoanStatus {
    ACTIVE
    COMPLETED
    CANCELLED
}

Loan ..> LoanStatus
Loan "1" --> "1" Vehicle : uses
Loan "1" --> "1" Station : starts at
Loan "1" --> "1" Station : ends at
Loan "1" --> "1" Payment: has

' Part pay
class Payment{
    - String paymentId
    - String loanId
    - float amount
    - PaymentStatus status
    - PaymentMethod method
    - Date paymentDate
    + getters()
    + setters()
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
}

enum PaymentMethod {
    CASH
    CREDIT_CARD
}



' class PaymentProcessorFactory{
'     - Map<String, IPaymentProcessor> methods
'     + createPayMethod(method: PaymentMethod): IPaymentProcessor
' }

' interface IPaymentProcessor{
'     + doPay(payment: Payment): PaymentStatus
'     + updatePay(payment: Payment): PaymentStatus
' }
' class CashPaymentProcessor{

' }
' class CreditCardPaymentProcessor{

' }

Payment ..> PaymentStatus
Payment ..> PaymentMethod

note top of Payment
  Entidad de Dominio
  Solo almacena estado y datos
  No contiene lógica de procesamiento
end note

' CashPaymentProcessor ..|> IPaymentProcessor
' CreditCardPaymentProcessor ..|> IPaymentProcessor
' PaymentProcessorFactory --> IPaymentProcessor
' PaymentProcessorFactory ..> PaymentMethod : use

' note right of IPaymentProcessor
'   Capa de Servicio/Aplicación
'   No es parte del dominio
'   Se comunicará con Payment a través de DTOs
' end note

@enduml
