@startuml EcoMove
' Vehicle and relations
class Vehicle{
    - String idVehicle
    - String color
    - String model
    - String idStation
    - StatusVehicle state
    - GeoLocation geoLocation
    - int MaxUserWeight
    - float velocityMax
    - float costForMinute
    + getters()
    + setters()
}

enum StatusVehicle {
    AVAILABLE
    IN_USE
    MAINTENANCE
    OUT_OF_SERVICE
}

class GeoLocation{
    - float latitude
    - float longitude
    - Date timestamp
    + getters()
    + setters()
}

class Station{
    - String idStation
    - String address      
    - GeoLocation geoLocation
    + getters()
    + setters()
}

class Battery {
    - int capacity
    - int autonomyRange
    + getters()
    + setters()
}

Vehicle "Many" --> "1" Station 
Vehicle ..> StatusVehicle
Vehicle --> GeoLocation

' Bicycle 
class Bicycle {
    - int gears
    - boolean hasBasket
    + getters()
    + setters()
}

Bicycle --|> Vehicle


class ElectricScooter {
    - boolean hasSeat
    - Battery batteryInfo
    + getters()
    + setters()
}

ElectricScooter --|> Vehicle
ElectricScooter --> Battery

class Skateboard {
    - int deckSize 

}

Skateboard --|> Vehicle

class CarElectric {
    - int doors
    - String licensePlate
    - Battery batteryInfo
    - boolean hasAirConditioning
}

CarElectric --> Battery
CarElectric --|> Vehicle

' part User
class User{
    - String idUser
    - String name
    - String lastName
    - String email
    - String password
    - UserStatus status
    + getters()
    + setters()
}

class Admin {
    - List<String> permissions
    + getters()
    + setters()
}

class Client {
    - List<Loan> loanHistory 
    + getters()
    + setters()
}

enum UserStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
}

User ..> UserStatus
User "1" --> "Many" Loan : has
Admin --|> User
Client --|> User

' part Loan
class Loan {
    - String loanId
    - String userId
    - String vehicleId
    - Date startTime
    - Date endTime
    - String startStationId
    - String endStationId
    - LoanStatus status
    - float cost
    + getters()
    + setters()
}

enum LoanStatus {
    ACTIVE
    COMPLETED
    CANCELLED
}

Loan ..> LoanStatus
Loan "1" --> "1" Vehicle : uses
Loan "1" --> "1" Station : starts at
Loan "1" --> "1" Station : ends at
Loan "1" --> "1" Payment: has

' Part pay
class Payment{
    - String paymentId
    - String loanId
    - float amount
    - PaymentStatus status
    - Date paymentDate
    + getters()
    + setters()
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
}

enum PaymentMethod {
    CASH
    CREDIT_CARD
}

interface IPaymentProcessor{
    + doPay(payment: Payment): PaymentStatus
    + updatePay(payment: Payment): PaymentStatus
}

class PaymentProcessorFactory{
    - Map<String, IPaymentProcessor>
    + createPayMethod(method: PaymentMethod): IPaymentProcessor
}


class CashPaymentProcessor{

}
class CreditCardPaymentProcessor{

}

Payment ..> PaymentStatus
Payment ..> PaymentMethod

CashPaymentProcessor ..|> IPaymentProcessor
CreditCardPaymentProcessor ..|> IPaymentProcessor
PaymentProcessorFactory --> IPaymentProcessor

note right of IPaymentProcessor
  Capa de Servicio/Aplicación
  No es parte del dominio
  Se comunicará con Payment a través de DTOs
end note

@enduml
