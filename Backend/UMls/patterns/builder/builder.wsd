@startuml EcoMove-builder 
' Vehicle and relations
abstract class Vehicle{
    # String idVehicle
    # String color
    # String model
    # Station station
    # StatusVehicle state
    # TypeVehicle type
    # GeoLocation geoLocation
    # int MaxUserWeight
    # float velocityMax
    # float costForMinute
    + getters()
    + setters()
}
class ElectricComponents {
    - int capacity
    - int autonomyRange
    + getters()
    + setters()
}

class MechanicalComponents {
    - DriveSystem driveSystem       
    - brakeType Type         
    - String bearingType       
}

class GeoLocation{
    - float latitude
    - float longitude
    - Date timestamp
    + getters()
    + setters()
}

class Station{
    - String idStation
    - String name
    - String address      
    - GeoLocation geoLocation
    + getters()
    + setters()
}


' Bicycle 
class Bicycle extends Vehicle {
    - int gears
    - boolean hasBasket
    + getters()
    + setters()
}

class Skateboard extends Vehicle {
    - int deckSize 
    + getters()
    + setters()
}

class Scooter extends Vehicle {
    - boolean hasSeat
    + getters()
    + setters()
}

' Vehiculos electricos especificos
class BicycleElectric extends Bicycle{
    - ElectricComponents info
}

class ScooterElectric extends Scooter {
     - ElectricComponents info
}

class SkateBoardElectric extends Skateboard {
    - ElectricComponents info
}

' Vehiculos mecanicos especificos
class BicycleMecanic extends Bicycle{
    - MechanicalComponents info
}

class ScooterMecanic extends Scooter {
     - MechanicalComponents info
}

class SkateBoardMecanic extends Skateboard {
    - MechanicalComponents info
}


enum TypeVehicle{
    BICYCLE 
    ELECTRIC_SCOOTER 
    SKATEBOARD 
    CAR_ELECTRIC
}
enum StatusVehicle {
    AVAILABLE
    IN_USE
    MAINTENANCE
    OUT_OF_SERVICE
}
enum DriveSystem{
    CHAIN
    DIRECT
    BELT
}

enum brakeType {
    DISC
    RIM 
    FOOT
}


' PATRON BUILDER
interface VehicleBuilder {
    + setIdVehicle(String id)
    + setColor(String color)
    + setModel(String model)
    + setStation(Station station)
    + setState(StatusVehicle state)
    + setType(TypeVehicle type)
    + setGeoLocation(GeoLocation geoLocation)
    + setMaxUserWeight(int weight)
    + setVelocityMax(float velocity)
    + setCostForMinute(float cost)
    + build(): Vehicle
}

class BicycleElectricBuilder implements VehicleBuilder {
    - String idVehicle
    - String color
    - String model
    - Station station
    - StatusVehicle state
    - TypeVehicle type
    - GeoLocation geoLocation
    - int MaxUserWeight
    - float velocityMax
    - float costForMinute
    - int gears
    - boolean hasBasket
    - ElectricComponents electricComponents
    + setGears(int gears)
    + setHasBasket(boolean hasBasket)
    + setElectricComponents(ElectricComponents components)
    + build(): BicycleElectric
}

class BicycleMecanicBuilder implements VehicleBuilder {
    - String idVehicle
    - String color
    - String model
    - Station station
    - StatusVehicle state
    - TypeVehicle type
    - GeoLocation geoLocation
    - int MaxUserWeight
    - float velocityMax
    - float costForMinute
    - int gears
    - boolean hasBasket
    - MechanicalComponents mechanicalComponents
    + setGears(int gears)
    + setHasBasket(boolean hasBasket)
    + setMechanicalComponents(MechanicalComponents components)
    + build(): BicycleMecanic
}

class ScooterElectricBuilder implements VehicleBuilder {
    - String idVehicle
    - String color
    - String model
    - Station station
    - StatusVehicle state
    - TypeVehicle type
    - GeoLocation geoLocation
    - int MaxUserWeight
    - float velocityMax
    - float costForMinute
    - boolean hasSeat
    - ElectricComponents electricComponents
    + setHasSeat(boolean hasSeat)
    + setElectricComponents(ElectricComponents components)
    + build(): ScooterElectric
}

class ScooterMecanicBuilder implements VehicleBuilder {
    - String idVehicle
    - String color
    - String model
    - Station station
    - StatusVehicle state
    - TypeVehicle type
    - GeoLocation geoLocation
    - int MaxUserWeight
    - float velocityMax
    - float costForMinute
    - boolean hasSeat
    - MechanicalComponents mechanicalComponents
    + setHasSeat(boolean hasSeat)
    + setMechanicalComponents(MechanicalComponents components)
    + build(): ScooterMecanic
}

class SkateboardElectricBuilder implements VehicleBuilder {
    - String idVehicle
    - String color
    - String model
    - Station station
    - StatusVehicle state
    - TypeVehicle type
    - GeoLocation geoLocation
    - int MaxUserWeight
    - float velocityMax
    - float costForMinute
    - int deckSize
    - ElectricComponents electricComponents
    + setDeckSize(int deckSize)
    + setElectricComponents(ElectricComponents components)
    + build(): SkateBoardElectric
}

class SkateboardMecanicBuilder implements VehicleBuilder {
    - String idVehicle
    - String color
    - String model
    - Station station
    - StatusVehicle state
    - TypeVehicle type
    - GeoLocation geoLocation
    - int MaxUserWeight
    - float velocityMax
    - float costForMinute
    - int deckSize
    - MechanicalComponents mechanicalComponents
    + setDeckSize(int deckSize)
    + setMechanicalComponents(MechanicalComponents components)
    + build(): SkateBoardMecanic
}

class VehicleDirector {
    - VehicleBuilder builder
    + VehicleDirector(VehicleBuilder builder)
    + constructBasicVehicle()
    + constructPremiumVehicle()
    + getVehicle(): Vehicle
}


VehicleDirector o-- VehicleBuilder
VehicleBuilder ..> Vehicle : builds

BicycleElectricBuilder ..> BicycleElectric : creates
BicycleMecanicBuilder ..> BicycleMecanic : creates
ScooterElectricBuilder ..> ScooterElectric : creates
ScooterMecanicBuilder ..> ScooterMecanic : creates
SkateboardElectricBuilder ..> SkateBoardElectric : creates
SkateboardMecanicBuilder ..> SkateBoardMecanic : creates

Vehicle "Many" --> "1" Station 
Vehicle ..> StatusVehicle
Vehicle ..> TypeVehicle
Vehicle --> GeoLocation


MechanicalComponents --> DriveSystem
MechanicalComponents --> brakeType

ScooterElectric *-- ElectricComponents
BicycleElectric *-- ElectricComponents
SkateBoardElectric *-- ElectricComponents 


ScooterMecanic *-- MechanicalComponents
BicycleMecanic *-- MechanicalComponents
SkateBoardMecanic *-- MechanicalComponents

@enduml